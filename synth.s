# Networking
.globl network_init
.globl network_getchar

# Terminal
.globl terminal_init
.globl terminal_getchar
.globl terminal_putchar
.globl terminal_putbyte
.globl terminal_print
.globl terminal_newline

# Keypad
.globl keypad_getbyte

# Sound device
.globl output_init
.globl output_volume
.globl output_wave

# Note lookup tabel
.globl note_lookup

# PRT TCR values
.set PRT_ENABLED, 0x11
.set PRT_DISABLED, 0x00

start:
    # Make sure interrupts are disabled during setup
    di
    # Set the stack pointer
    ld sp, 0xffff
    # Initialise the terminal interface
    call terminal_init
    # Initialise the network interface
    call network_init
    # Initialise the output interface
    call output_init

    # Play an A (testing)
    ld a, 0xff
    call output_volume
    ld a, 0x45
    call set_note

    # Reset the character count
    ld b, 0x00

    # Set the instrument (channel 9)
    ld a, 0x09
    ld (channel), a

    # Set the wave sample
    exx
    ld hl, sample_acbass_sustain
    exx

    # Get the address of the interrupt table
    ld hl, interrupts
    # Set the  interrupt base vector
    ld a, h
    ld i, a
    # Set the interrupt low base vector
    ld a, l
    and 0xe0    # Paranoia, .align 5 should do this anyway
    out0 (IL), a
    # Enable INT0, INT1 and INT2
    ld a, 0x07
    out0 (ITC), a
    
    # Enable interrupts on PRT0
    ld a, PRT_ENABLED
    out0 (PRT_TCR), a

    # Enable interrupts
    im 2
    ei

    # Wait until something happens
0:  nop
    jr 0b

.align 5
interrupts:
    .int int_int1
    .int int_int2
    .int int_prt0
    .int int_prt1
    .int int_dma0
    .int int_dma1
    .int int_csio
    .int int_asci0
    .int int_asci1


int_int1:
    reti

# Keypad interrupt handler
keypad_lockout:
    .byte 0x00
int_int2:
    di
    ld a, (keypad_lockout)
    cp 0x00
    jr z, 1f
    pop hl
    jr 2f

1:  ld a, 0xff
    ld (keypad_lockout), a
    call keypad_getbyte
    # Change the instrument
    ld (channel), a

2:  ei
    nop
    nop
    nop
    ld a, 0x00
    ld (keypad_lockout), a
    reti

#
# PRT0 Interrupt handler - wave output
#
# Uses only the shadow registers, so that the interrupt handler finishes quickly
# and can happen during other interrupts without making a mess
#
int_prt0:
    # Disable interrupts, exchange registers
    di
    ex af, af
    exx

    # Clear the interrupt
    in0 a, (PRT_TCR)
    in0 a, (PRT0_DR_L)

    # Output the part of the wave
    ld a, (hl)
    out0 (OUTPUT_WAVE), a

    ld a, l
    add a, c
    ld l, a

    exx
    ex af, af
    ei
    reti

int_prt1:
    reti
int_dma0:
    reti
int_dma1:
    reti
int_csio:
    reti

# 
# Network data interrupt handler
#
# Registers:
#   B = character counter
#   C = temp character holding
#
# Memory:
#   channel = current instrument channel
#   channel_pitch = most recent pitch value
#   channel_volume = most recent volume
#
channel:
    .byte 0x00
channel_pitch:
    .byte 0x00
channel_volume:
    .byte 0x00

int_asci0:
    # Disable interrupts
    di
    # Clear the interrupt on the ASCI
    ld a, NETWORK_CTRLA_VALUE
    out0 (NETWORK_CTRLA), a
    # Get the character
0:  in0 a, (NETWORK_STAT)
    bit 7, a
    jr z, 0b
    in0 a, (NETWORK_RX)

    # Check for end of packet (carriage return)
    cp 0x0d
    # Re-enable interrupts to reduce effect on sound
    ei
    # If not the end of the packet, go do something with the char
    jr nz, 1f

    # Reset the counter (but preserve it in A for now)
    ld a, b
    ld b, 0x00
    # Check if the packet was the correct length
    cp 0x21
    # If not, ignore it
    jr nz, 9f

    # Get the volume value
    ld a, (channel_volume)
    # 7-bit -> 8-bit
    sla a
    # Output the volume
    out0 (OUTPUT_VOL), a

    # Get the pitch value
    ld d, 0x00
    ld a, (channel_pitch)
    ld e, a
    # Load the base address
    ld hl, note_lookup
    # Shift value left twice (4-byte boundary)
    sla e
    sla e
    # Bring carry onto high byte
    rl d
    # Make the absolute address
    add hl, de
    # Low PRT byte
    ld a, (hl)
    out0 (PRT0_RLD_L), a
    # High PRT byte
    inc hl
    ld a, (hl)
    out0 (PRT0_RLD_H), a
    # Divisor
    inc hl
    ld a, (hl)
    # Store it in the registers used by the playback interrupt handler
    di
    exx
    ld c, a
    exx
    ei
    
    # Skip over character handler
    jr 9f

1:  # Increment the character counter
    inc b
    # Preserve the character
    ld c, a
    # Get the channel ID
    ld a, (channel)
    # Shift left to get the packet position of pitch
    sla a
    
    # Is this the pitch byte?
    cp b
    jr nz, 2f

    # Store it in the pitch variable
    ld a, c
    ld (channel_pitch), a

    # Skip over volume handler
    jr 9f

2:  # Is this the volume byte?
    inc a
    cp b
    jr nz, 9f

    # Store it in the volume variable
    ld a, c
    ld (channel_volume), a

9:  reti

int_asci1:
    reti

# 
# Set the frequency based on the MIDI note
#
set_note:
    # Preserve HL and BC
    push hl
    push bc
    # Load the base address
    ld hl, note_lookup
    ld b, 0x00
    # Shift left twice (for 4-byte boundary)
    sla a
    sla a
    # Bring the carry onto the high byte
    rl b
    # Load the low byte to C
    ld c, a
    # Do the offset
    add hl, bc
    # Low PRT byte
    ld a, (hl)
    out0 (PRT0_RLD_L), a
    # High PRT byte
    inc hl
    ld a, (hl)
    out0 (PRT0_RLD_H), a
    # Divisor
    inc hl
    ld a, (hl)
    # Store it in the registers used by the playback interrupt handler
    exx
    ld c, a
    exx
    # Restore registers
    pop bc
    pop hl
    # Return!
    ret

.align 8
sample_acbass_sustain:
    .byte 0x7f,0x86,0x8e,0x9a,0x9f,0xa6,0xaa,0xb0,0xb4,0xb7
    .byte 0xba,0xc0,0xc3,0xc5,0xc6,0xc6,0xc6,0xc6,0xc6,0xc5
    .byte 0xc3,0xc1,0xc0,0xbe,0xbc,0xb9,0xb4,0xb0,0xad,0xaa
    .byte 0xa3,0xa3,0xa1,0x9e,0x9c,0x97,0x95,0x92,0x93,0x8e
    .byte 0x8d,0x87,0x81,0x7f,0x7c,0x78,0x73,0x70,0x6e,0x69
    .byte 0x67,0x64,0x62,0x5f,0x5b,0x58,0x56,0x55,0x53,0x51
    .byte 0x51,0x51,0x51,0x51,0x53,0x53,0x54,0x58,0x5b,0x62
    .byte 0x65,0x69,0x6c,0x6e,0x73,0x76,0x78,0x7c,0x7d,0x81
    .byte 0x82,0x84,0x84,0x82,0x82,0x82,0x81,0x81,0x7f,0x81
    .byte 0x82,0x88,0x8d,0x90,0x95,0x9f,0xa1,0xa9,0xb4,0xba
    .byte 0xbc,0xbc,0xbe,0xbe,0xc0,0xc1,0xc5,0xca,0xcf,0xd4
    .byte 0xd4,0xd6,0xd9,0xdd,0xe3,0xe7,0xec,0xef,0xed,0xef
    .byte 0xf3,0xf6,0xf8,0xfb,0xf6,0xf3,0xf1,0xef,0xee,0xea
    .byte 0xe8,0xe3,0xe3,0xe2,0xe0,0xde,0xdc,0xdd,0xd9,0xd4
    .byte 0xd1,0xcd,0xc6,0xc6,0xc3,0xc0,0xbe,0xbc,0xb9,0xb8
    .byte 0xb7,0xb4,0xb3,0xb2,0xb2,0xaf,0xaf,0xaf,0xaf,0xb1
    .byte 0xb4,0xb6,0xb9,0xbb,0xba,0xbb,0xb9,0xb9,0xb7,0xb5
    .byte 0xb4,0xb0,0xad,0xa8,0xa6,0xa1,0x9c,0x9a,0x97,0x95
    .byte 0x90,0x90,0x8e,0x8d,0x8d,0x8b,0x88,0x88,0x86,0x84
    .byte 0x81,0x7f,0x78,0x73,0x6c,0x69,0x65,0x60,0x5b,0x53
    .byte 0x53,0x49,0x45,0x42,0x3f,0x38,0x34,0x2a,0x27,0x20
    .byte 0x19,0x16,0x11,0x10,0x11,0x12,0x14,0x14,0x14,0x12
    .byte 0x10,0x10,0x0d,0x0b,0x0b,0x08,0x08,0x03,0x01,0x01
    .byte 0x03,0x06,0x0d,0x12,0x17,0x1c,0x20,0x23,0x27,0x2c
    .byte 0x2f,0x32,0x3b,0x3d,0x42,0x49,0x4e,0x4f,0x58,0x5b
    .byte 0x62,0x66,0x69,0x70,0x76,0x7f
sample_sine_sustain:
    .byte 0x7f,0x85,0x8a,0x90,0x95,0x9b,0xa0,0xa6,0xab,0xb0
    .byte 0xb5,0xba,0xbf,0xc3,0xc8,0xcc,0xd0,0xd4,0xd8,0xdb
    .byte 0xde,0xe1,0xe4,0xe7,0xe9,0xeb,0xed,0xee,0xf0,0xf1
    .byte 0xf1,0xf2,0xf2,0xf2,0xf1,0xf1,0xf0,0xee,0xed,0xeb
    .byte 0xe9,0xe7,0xe4,0xe1,0xde,0xdb,0xd8,0xd4,0xd0,0xcc
    .byte 0xc8,0xc3,0xbf,0xba,0xb5,0xb0,0xab,0xa6,0xa0,0x9b
    .byte 0x95,0x90,0x8a,0x85,0x7f,0x79,0x74,0x6e,0x69,0x63
    .byte 0x5e,0x58,0x53,0x4e,0x49,0x44,0x3f,0x3b,0x36,0x32
    .byte 0x2e,0x2a,0x26,0x23,0x20,0x1d,0x1a,0x17,0x15,0x13
    .byte 0x11,0x10,0x0e,0x0e,0x0d,0x0c,0x0c,0x0c,0x0d,0x0d
    .byte 0x0e,0x10,0x11,0x13,0x15,0x17,0x1a,0x1d,0x20,0x23
    .byte 0x26,0x2a,0x2e,0x32,0x36,0x3b,0x3f,0x44,0x49,0x4e
    .byte 0x53,0x58,0x5e,0x63,0x69,0x6e,0x74,0x79,0x7f,0x85
    .byte 0x8a,0x90,0x95,0x9b,0xa0,0xa6,0xab,0xb0,0xb5,0xba
    .byte 0xbf,0xc3,0xc8,0xcc,0xd0,0xd4,0xd8,0xdb,0xde,0xe1
    .byte 0xe4,0xe7,0xe9,0xeb,0xed,0xee,0xf0,0xf1,0xf1,0xf2
    .byte 0xf2,0xf2,0xf1,0xf1,0xf0,0xee,0xed,0xeb,0xe9,0xe7
    .byte 0xe4,0xe1,0xde,0xdb,0xd8,0xd4,0xd0,0xcc,0xc8,0xc3
    .byte 0xbf,0xba,0xb5,0xb0,0xab,0xa6,0xa0,0x9b,0x95,0x90
    .byte 0x8a,0x85,0x7f,0x79,0x74,0x6e,0x69,0x63,0x5e,0x58
    .byte 0x53,0x4e,0x49,0x44,0x3f,0x3b,0x36,0x32,0x2e,0x2a
    .byte 0x26,0x23,0x20,0x1d,0x1a,0x17,0x15,0x13,0x11,0x10
    .byte 0x0e,0x0d,0x0d,0x0c,0x0c,0x0c,0x0d,0x0d,0x0e,0x10
    .byte 0x11,0x13,0x15,0x17,0x1a,0x1d,0x20,0x23,0x26,0x2a
    .byte 0x2e,0x32,0x36,0x3b,0x3f,0x44,0x49,0x4e,0x53,0x58
    .byte 0x5e,0x63,0x69,0x6e,0x74,0x79
